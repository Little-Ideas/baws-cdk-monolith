vpc:
  name: bawsVpc
  numPublicSubnets: 2
  baseAddress: "10.0.0.0"
  baseCidrSize: "24"
s3:
  buckets:
    # You may make as many buckets as you like but you must create at least one of each.
    # One assets, one artifacts, and one logs. The first of each created will be used for 
    # corresponding parts of baws stacks, as they're created.
    - name: baws-pipeline
      # assets | logs | artifacts
      type: artifacts
      addUniqueId: true
      # cdnReference:
    - name: baws-assets
      type: assets
      addUniqueId: true
    - name: baws-logs
      type: logs
      addUniqueId: true
cdn:
  distributions:
    - name: baws cdn
      enabled: true
      # If 'global' is used for certificateArn, the `cloudFrontSSLCert` value from cdk.json
      # will be used.
      # When a valid value for certificateArn is provided, SSL redirect will automatically be enabled.
      # To disable https for the distribution comment out the certificateArn variable.
      # Certificates must be created in the us-east-1 region.
      certificateArn: arn:aws:acm:us-east-1:12345679:certificate/5295d80a-3498-464b-8261-8695afd2adb4
      # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html
      # PriceClass_100 | PriceClass_200 | PriceClass_ALL
      priceClass: PriceClass_100
      enableCookielessAssets: true
      enablePostRequests: true
      # Must be unique per account. You cannot have domains listed here which also belong to 
      # other distributions
      cnames:
        - example.com
        - '*.example.com'
alb:
  name: baws-alb
efs:
  name: baws efs
  encrypted: false
launchTemplates:
  # @todo implement bastion server creation.
  # Launch template creation for ecs has moved into scaling.
  - name: baws-bastion-instance
    instanceName: baws bastion
    type: bastion
    instanceType: t3a.nano
    storageSize: 20
    efs: false
scaling:
  
  desiredSize: "2"
  maxSize: "7"
  minSize: "1"
  # This is paired with scaling, instead of pulling from the template config,
  # because dependent stacks cannot be updated, which prevents
  # changes to the launch template after autoscaling has been setup. This is bad.
  # It appears to be a known issue with CDK, detailed here: https://github.com/aws/aws-cdk/issues/3414
  # Once the issue is resolved, the launch template will be separated again. 
  launchTemplate:
    name: baws-ecs-template
    instanceName: baws auto
    type: ecs
    # Available types here: 
    # https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html
    instanceType: t3a.small
    storageSize: 50
    efs: true
rds:
  clusterName: baws-cluster
  # `aurora` is the most compatible and feature complete version of Aurora.
  # Other available options detailed here: 
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbcluster.html
  auroraEngine: aurora
  # This must correlate to the option above. Details here: 
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbclusterparametergroup.html
  paramFamily: aurora5.6
  # aws rds create-db-cluster-parameter-group --db-cluster-parameter-group-name baws-57 --db-parameter-group-family aurora-mysql5.7 --description "Created for baws."
  # wait 5 minutes after running command.
  paramGroupName: baws-57
  backupRetention: 7
  # This is the parameter name stored in the parameter store.
  # Create these either by using the command line from below (only from a secure terminal)
  # Or by creating the parameter manually through the console.
  masterUsernameSSM: db-master-user
  masterPasswordSSM: db-master-pass
  masterPasswordVersion: 1
  # `dbHostParamName` and `dbROHostParamName` will set SSM values upon creation.
  # The value listed under each key can be used by services which need the database host value.
  dbHostParamName: db-host
  dbROHostParamName: db-ro-host
  instanceType: db.t3.small
  clusterSize: 1
cache:
  # filesDir: ./config/cache
  clusters:
    - name: baws-cache
      hostParamName: cache-host
      instanceType: cache.t2.micro
      # memcached | redis
      engine: memcached
      clusterSize: 1
commitRepo:
  repos:
    - name: baws-app
      description: baws cdk app
ecs:
  clusterName: baws-cluster
  # Example files included in the corresponding directories below. Uncomment to use them.
  # If task path is uncommented, both tasks defined in the directory files, and the tasks
  # defined below will be created. Either comment the `tasksDir` or delete the tasks object below,
  # if you don't want corresponding tasks or servics to be created.
  
  configDir: config/ecs/tasks
  tasks:
    - name: baws-app
      # If create ecr is set to true the URI for that repo will automatically be used, and override
      # 
      imageURI: nginx:alpine
      priority: 100
      createECR: true
      # To disable the service, set this to 0.
      desiredCount: 4
      listeners:
      # Only one host condition is currently supported
        - condition:
          hosts: 
          - "*.example.com"
          - example.com
      
      type: ec2
      # The amount reserved for your app. If this is too big, and your server doesn't have enough space,
      # it will not be deployed. Ideally, make as small as possible, and deploy more instances with autoscaling.
      softMemoryLimit: 256
      # Your container is allowed to go over its soft limit, if avaialble. If it hits hard limit, though,
      # the container will be terminated and replaced. 
      hardMemoryLimit: 1024
      cpuUnits: 256
      hostPort: 0
      containerPort: 80
      logRegion: us-east-1
      # Values passed directly to the container
      variables:
        # NGINX_ENABLED and WEBROOT are applicable if you're using baws-nginx-* containers. 
        # drupal | wordpress | default
        # NGINX_ENABLED: drupal
        # WEBROOT: web
      # params are values retreived from the parameter store
      # Underscored values listed here, for instance db_name, db_user, db_host must be created 
      # in the parameter store before using them. (Future baws tools will simplify this process)
      # Uncomment values according to usage.
      # DB_HOST and DB_HOST_RO values can match the value created `rds.dbHostParamName` if you're
      # creating an RDS with this CDK.
      params:
        # DB_HOST: db-host
        # DB_HOST_RO: db-host-ro
        # DB_NAME: db_name
        # DB_USER: db_user
        # DB_PASS: db_pass
        # REDIS_HOST: redis_host
        # REDIS_PREFIX: redis_prefix
      # Host volumes. Names here will be available as mount points in the bind section
      # The key below `mounts` must have a corresponding `volumes` key.
      # `volumes` are the paths found in ec2 instances. `mounts` are the paths inside containers.
      volumes:
        # EFS: /mnt/efs/website-name/assets
        # PRIVATE: /mnt/efs/website-name/private
        # TMP: /mnt/efs/tmp/website-name
      mounts:
        # Drupal
        # EFS: /var/www/html/web/sites/default/files
        # TMP: /var/www/html/tmp
        # PRIVATE: /var/www/html/private
        # WordPress
        # EFS: /var/www/html/web/sites/plugins/uploads
      
codepipeline:
  configDir: config/code-pipelines
  pipelines:
    - name: baws-pipeline
      type: ecs
      #must match repo name used in codecommit.
      repoNameReference: baws-app
      branchToWatch: master
      # Must match `name` under ecs.tasks.name
      taskNameReference: baws-app
      # must match `name` under ecs.service.name
      serviceNameReference: baws-service
      # must match `name` under service.name
      clusterNameReference: baws-cluster
notifications:
  codepipeline:
    functionName: baws-notifications
    pipelineNameReference: baws-pipeline
    # Info on setting up a slack hook here: 
    # https://api.slack.com/slack-apps
    slackChannel: aws
    slackURL: 